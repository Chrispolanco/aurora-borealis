{"version":3,"sources":["actions/posts.js","actions/user.js","components/user/Logout.js","components/user/Login.js","components/user/SignUp.js","components/comments/CommentCard.js","actions/comments.js","components/comments/CommentForm.js","components/posts/PostCard.js","components/posts/Posts.js","containers/PostContainer.js","components/posts/PersonalPost.js","components/posts/PersonalPosts.js","containers/PersonalPostContainer.js","components/posts/PostForm.js","containers/CreatePostContainer.js","containers/Number.js","components/user/Nav.js","App.js","serviceWorker.js","reducers/postReducer.js","reducers/currentUserReducer.js","index.js"],"names":["fetchPosts","dispatch","fetch","credentials","method","headers","then","response","json","posts","error","alert","type","getPosts","catch","console","log","setCurrentUser","user","connect","logout","notice","history","onSubmit","event","preventDefault","push","className","Login","state","username","password","handleOnChange","setState","target","name","value","handleOnSubmit","props","login","this","htmlFor","onChange","placeholder","Component","body","JSON","stringify","SignUp","email","first_name","last_name","signup","newUser","CommentCard","comment","date","Date","created_at","toLocaleDateString","context","React","PureComponent","fetchComments","comments","getComments","CommentForm","addComment","user_id","userLoggedIn","id","post_id","post","withRouter","enteredCommentData","commentData","PostCard","sortedComments","filter","length","map","key","location","story","sort","a","b","Posts","oldestToNewest","PostContainer","currentUserReducer","postReducer","commentReducer","PersonalPost","deletePost","PersonalPosts","personalPost","PersonalPostContainer","postId","deletePostConnect","PostForm","createPost","enteredPostData","postData","CreatePostContainer","Number","count","increment","updatedCount","deduction","onClick","to","activeStyle","color","exact","path","component","Logout","App","Boolean","window","hostname","match","initialState","action","votes","reducer","combineReducers","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1467857f.chunk.js","sourcesContent":["export const getPosts = posts => {\n    return {\n        type: \"GET_POSTS\", \n        posts \n    }\n}\n\nexport const clearPosts = () => {\n    return{\n        type: \"CLEAR_POSTS\", \n    }\n}\n\nexport const addPost = post => {\n    return {\n        type: \"ADD_POST\", \n        post\n    }\n}\n\nexport const deletePostConnect = postId => {\n    return {\n        type: \"DELETE_POST\", \n        postId\n    }\n}\n\nexport const updatePostConnect = post => {\n    return {\n        type: \"UPDATE_POST\", \n        post\n    }\n}\n\nexport const upVotePost = post => {\n    return {\n        type: \"UPVOTE_POST\", \n        post\n    }\n}\n\nexport const downVotePost = post => {\n    return {\n        type: \"DOWNVOTE_POST\", \n        post\n    }\n}\n\nexport const fetchPosts = () => {\n    return (dispatch) => {\n        return fetch (\"http://localhost:3000/posts\", {\n            credentials: \"include\", \n            method: \"GET\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(response => response.json())\n        .then(posts => { \n            if (posts.error){\n                alert(posts.error)\n            } else {\n                dispatch(getPosts(posts))\n            }\n        })\n        .catch(console.log)\n    }\n}\n\nexport const deletePost = (postId, history) => {\n    return (dispatch) => {\n        return fetch(`http://localhost:3000/posts/${postId}`, {\n            credentials: \"include\", \n            method: \"DELETE\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                if (response.error) {\n                    alert(response.error)\n                } else {\n                    dispatch(deletePostConnect(postId))\n                    dispatch(clearPosts())\n                    dispatch(fetchPosts())\n                    history.push(\"/posts\")\n                }\n            })\n            .catch(console.log)\n    }\n}\n\nexport const createPost = (enteredPostData) => {\n    return dispatch => {\n        const postData = {\n            post: {\n                location: enteredPostData.location, \n                story: enteredPostData.story, \n                user_id: enteredPostData.user_id\n            }\n        }\n        return fetch(\"http://localhost:3000/posts\", {\n            credentials: \"include\", \n            method: \"POST\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }, \n            body: JSON.stringify(postData)\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.error) {\n                alert(response.error)\n            } else {\n                dispatch(addPost(response))\n                dispatch(clearPosts())\n                dispatch(fetchPosts())\n            }\n        })\n        .catch(console.log)\n    }\n}\n\n// export const updatePost = (enteredPostData) => {\n//     return dispatch => {\n//         const postData = {\n//             post: {\n//                 location: enteredPostData.location, \n//                 story: enteredPostData.story, \n//                 user_id: enteredPostData.user_id\n//             }\n//         }\n//         return fetch(\"http://localhost:3000/posts\"+`${enteredPostData.id}`, {\n//             credentials: \"include\", \n//             method: \"PATCH\", \n//             headers: {\n//                 \"Content-Type\": \"application/json\"\n//             }, \n//             body: JSON.stringify(postData)\n//         })\n//         .then(response => response.json())\n//         .then(response => {\n//             if (response.error) {\n//                 alert(response.error)\n//             } else {\n//                 dispatch(updatePostConnect(response))\n//             }\n//         })\n//         .catch(console.log)\n//     }\n// }","import { clearPosts } from './posts'; \n\nexport const setCurrentUser = user => {\n    return {\n        type: \"CURRENT_USER\", \n        user \n    }\n}\n\nexport const removeCurrentUser = () => {\n    return {\n        type: \"REMOVE_USER\"\n    }\n}\n\nexport const login = (credentials) => {\n    return(dispatch) => {\n        dispatch(removeCurrentUser())\n        return fetch(\"http://localhost:3000/login\",{\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n        .then(response => response.json())\n        .then(response => {\n            if(response.error){\n                alert(response.error)\n                console.log(\"Not Logged In\")\n            } else {\n                dispatch(setCurrentUser(response))\n            }\n        })\n        .catch(console.log)\n    }\n}\n\nexport const logout = () => {\n    return (dispatch) => {\n        dispatch(removeCurrentUser())\n        dispatch(clearPosts())\n        return fetch(\"http://localhost:3000/logout\", {\n            credentials: \"include\", \n            method: \"DELETE\"\n        })\n        .then(response => response.json())\n        .then(response => alert(response.notice))\n    }\n}\n\nexport const getCurrentUser = () => {\n    return dispatch => {\n        return fetch(\"http://localhost:3000/get_current_user\", {\n            credentials: \"include\", \n            method: \"GET\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }, \n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.error) {\n                alert(response.error)\n            } else {\n                dispatch(setCurrentUser(response))\n            }\n        })\n        .catch(console.log)\n    }\n}\n\nexport const signup = (credentials) => {\n    return (dispatch) => {\n        const newUser = {\n            user: credentials\n        }\n        return fetch(\"http://localhost:3000/signup\", {\n            credentials: \"include\", \n            method: \"POST\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }, \n            body: JSON.stringify(newUser)\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.error) {\n                alert(response.error)\n                console.log(\"Signup failed\")\n            } else {\n                dispatch(setCurrentUser(response))\n            }\n        })\n        .catch(console.log)\n    }\n}","import React from 'react'; \nimport { connect } from 'react-redux'; \nimport { logout } from '../../actions/user'; \n\nconst Logout = ({ logout, history }) => {\n    return (\n        <form onSubmit={(event) => { \n            event.preventDefault()\n            logout()\n            history.push('/login')\n        }\n    }>\n            <button type=\"submit\" className=\"button\">Log Out</button>\n        </form>\n    )\n}\n\nexport default connect(null, {logout})(Logout)","import React, { Component } from 'react'; \nimport { connect } from 'react-redux'; \nimport { login } from '../../actions/user'; \n\nclass Login extends Component {\n\n    state = {\n        username: \"\", \n        password: \"\"\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value \n        })\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault()\n        this.props.login(this.state)\n\n        this.setState({\n            username: \"\", \n            password: \"\"\n        })\n        this.props.history.push('/')\n    }\n\n    render() {\n        return(\n            <div className=\"LoginForm\"> \n                <form onSubmit= {this.handleOnSubmit}> \n                    <label htmlFor=\"username\"> Username: </label>\n                    <br/> \n                    <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleOnChange} placeholder=\"Username\" />\n                    <br/> \n                    <label htmlFor=\"password\"> Password: </label>\n                    <br/> \n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleOnChange} placeholder=\"Password\" /> \n                    <br/>\n                    <input type=\"submit\" value=\"Log In\" /> \n                </form>\n            </div> \n        )\n    }\n}\n\nexport default connect(null, { login })(Login); ","import React, { Component } from 'react';  \nimport { connect } from 'react-redux'; \nimport { signup } from '../../actions/user'; \n\nclass SignUp extends Component {\n\n    state = {\n        username: '',\n        password: '', \n        email: '', \n        first_name: '', \n        last_name: ''\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault()\n        this.props.signup(this.state); \n\n        this.setState({\n            username: '',\n            password: '', \n            email: '', \n            first_name: '', \n            last_name: ''\n        })\n        this.props.history.push('/')\n    }\n\n    render() {\n        return(\n            <div className=\"SignInForm\">\n                <form onSubmit = { this.handleOnSubmit }> \n                    <label htmlFor=\"username\"> Username: </label>\n                    <br/> \n                    <input className=\"InnerSignInForm\" type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleOnChange} placeholder=\"Username\" />\n                    <br/> \n                    <label htmlFor=\"password\"> Password: </label>\n                    <br/> \n                    <input className=\"InnerSignInForm\" type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleOnChange} placeholder=\"Password\" /> \n                    <br/>\n                    <label htmlFor=\"email\"> Email: </label>\n                    <br/> \n                    <input className=\"InnerSignInForm\" type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleOnChange} placeholder=\"Email\" />\n                    <br/> \n                    <label htmlFor=\"first_name\"> First Name: </label>\n                    <br/> \n                    <input className=\"InnerSignInForm\" type=\"text\" name=\"first_name\" value={this.state.first_name} onChange={this.handleOnChange} placeholder=\"First Name\" /> \n                    <br/>\n                    <label htmlFor=\"last_name\"> Last Name: </label>\n                    <br/> \n                    <input className=\"InnerSignInForm\" type=\"text\" name=\"last_name\" value={this.state.last_name} onChange={this.handleOnChange} placeholder=\"Last Name\" /> \n                    <br/> \n                    <button type=\"submit\" className=\"button\">Sign Up</button>\n                </form>\n            </div> \n        )\n    }\n\n}\n\n\nexport default connect(null, { signup })(SignUp)\n\n","import React from 'react';\n\nclass CommentCard extends React.PureComponent {\n\n    render() {\n        const { comment } = this.props; \n        const date = new Date(comment.created_at).toLocaleDateString()\n        return( \n            <div> \n                <p className=\"DateCommentSubmitted\"> \n                    {date}\n                </p>\n\n                <p className=\"Comment\">\n                    {comment.context}\n                </p> \n            </div>\n        )\n    }\n}; \n\nexport default CommentCard\n","import { clearPosts } from './posts'; \nimport { fetchPosts } from './posts'; \n\n\nexport const addCommentConnect = comment => {\n    return {\n        type: \"ADD_COMMENT\", \n        comment\n    }\n}\n\nexport const getComments = comments => {\n    return {\n        type: \"GET_COMMENTS\", \n        comments \n    }\n}\n\nexport const addComment = (enteredCommentData) => {\n    return dispatch => {\n        const commentData = {\n            comment: {\n                context: enteredCommentData.context, \n                user_id: enteredCommentData.user_id, \n                post_id: enteredCommentData.post_id\n            }\n        }\n        return fetch(`http://localhost:3000/comments`, {\n            credentials: \"include\", \n            method: \"POST\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }, \n            body: JSON.stringify(commentData)\n        })\n        .then(response => response.json())\n        .then(response => {\n            if (response.error) {\n                alert(response.error)\n            } else {\n                dispatch(addCommentConnect(response))\n                dispatch(clearPosts())\n                dispatch(fetchPosts())\n            }\n        })\n        .catch(console.log)\n    }\n}\n\nexport const fetchComments = () => {\n    return (dispatch) => {\n        return fetch (\"http://localhost:3000/comments\", {\n            credentials: \"include\", \n            method: \"GET\", \n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n        .then(response => response.json())\n        .then(comments => { \n            if (comments.error){\n                alert(comments.error)\n            } else {\n                dispatch(getComments(comments))\n            }\n        })\n        .catch(console.log)\n    }\n}","import React from 'react'; \nimport { connect } from 'react-redux'; \nimport { addComment } from '../../actions/comments'; \nimport { withRouter } from 'react-router-dom'; \n\nclass CommentForm extends React.PureComponent {\n\n    constructor(props){\n        super(props); \n        this.state={\n            context: '', \n            user_id: this.props.userLoggedIn.id, \n            post_id: this.props.post.id \n        }\n    }\n\n    handleOnChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value \n        })\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault(); \n        this.props.addComment(this.state)\n        this.setState({\n            context: ''\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"EnterCommentContainer\"> \n                <form onSubmit={this.handleOnSubmit}> \n                    <label htmlFor=\"context\" className=\"EnterComment\">Enter Comment</label>\n                    <textarea className=\"TextAreaComment\" type=\"text\" name=\"context\" onChange={this.handleOnChange} value={this.state.context}/> \n                <button type=\"submit\" className=\"button\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default withRouter(connect(null, { addComment })(CommentForm))","import React from 'react';\nimport CommentCard from '../comments/CommentCard'; \nimport CommentForm from '../comments/CommentForm'\n\nconst PostCard = ({ post, userLoggedIn }) => {\n    const date = new Date(post.created_at).toLocaleDateString()\n    const filteredComment = post.comments.filter(comment => \n        comment.context.length > 0)\n    const sortedComments = filteredComment.map(comment => {\n    return <CommentCard comment={comment} key={comment.id}/>})\n\n    return( \n        <div className=\"PostCardContainer\" key={post.id}> \n            {/* <p>Votes: {post.votes}</p> */}\n            <p>Date Submitted: {date}</p>\n            <p>Location: {post.location}</p>\n            <h4>Story</h4>\n            <div className=\"story\">{post.story}</div>\n            <p>Comments:</p>\n                {sortedComments.sort((a, b) => (a.created_at > b.created_at) ? 1 : -1)}\n                <CommentForm post={post} userLoggedIn={userLoggedIn} /> \n        </div>\n    )\n}\n\n\nexport default PostCard; \n\n\n","import React from 'react'; \nimport PostCard from '../posts/PostCard'\n\nconst Posts = ( {posts, userLoggedIn} ) => {\n\n    const oldestToNewest = posts.map(post => {\n        return <PostCard key={post.id} post={post} userLoggedIn={userLoggedIn} />\n    })\n\n    return(\n        <div>\n            {oldestToNewest.sort((a, b) => (a.created_at > b.created_at) ? 1 : -1)}\n        </div>\n    )\n}\n\n\nexport default Posts\n","import React from 'react'; \nimport { connect } from 'react-redux'; \nimport Posts from '../components/posts/Posts'; \nimport { fetchPosts } from './../actions/posts'; \nimport { fetchComments } from './../actions/comments'; \n\nclass PostContainer extends React.PureComponent {\n\n    componentDidMount() {\n        this.props.fetchPosts()\n        this.props.fetchComments()\n    }\n    \n    render() {\n        return(\n            <div className=\"PostsContainer\">\n                <Posts posts={this.props.posts} userLoggedIn={this.props.userLoggedIn} /> \n            </div> \n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        userLoggedIn: state.currentUserReducer, \n        posts: state.postReducer, \n        comments: state.commentReducer\n    })\n}\nexport default connect(mapStateToProps, { fetchPosts, fetchComments} )(PostContainer)","import React from 'react'; \nimport CommentCard from '../comments/CommentCard'\nimport CommentForm from '../comments/CommentForm'\n\nconst PersonalPost = ({ post, userLoggedIn, deletePost, history }) => {\n\n    const date = new Date(post.created_at).toLocaleDateString()\n    const filteredComment = post.comments.filter(comment => \n        comment.context.length > 0)\n    const sortedComments = filteredComment.map(comment => {\n    return <CommentCard comment={comment} key={comment.id}/>})\n\n    return(\n        <div className=\"PersonalPostContainer\" key={post.id} > \n            {/* <p>Votes: {post.votes}</p> */}\n\n            {/* <button onClick={() => deletePost(post.id, history)}>DELETE</button> */}\n            <p>Date Submitted: {date}</p>\n            <p>Location: {post.location}</p>\n            <h4>Story</h4>\n            <div className=\"story\">{post.story}</div>\n            <p>Comments:</p>\n                {sortedComments.sort((a, b) => (a.created_at > b.created_at) ? 1 : -1)}\n                <CommentForm post={post} userLoggedIn={userLoggedIn} /> \n        </div>\n    )\n}\n\nexport default PersonalPost\n\n// {post.comments.map(comment =>\n//     <CommentCard comment={comment} key={comment.id}/>)}","import React from 'react'; \nimport PersonalPost from './PersonalPost';  \n\nconst PersonalPosts = ({ posts, userLoggedIn, deletePost, history }) => {\n\n    const personalPosts = posts.filter(post => \n        post.user_id === userLoggedIn.id)\n\n    const personalPost = personalPosts.map(post => {\n        return <PersonalPost key={post.id} post={post} userLoggedIn={userLoggedIn} deletePost={deletePost} history={history} />\n    })\n\n    return(\n        <div>\n            {personalPost.sort((a, b) => (a.created_at > b.created_at) ? 1 : -1)}\n        </div>\n    )\n}\n\nexport default PersonalPosts; ","import React from 'react'; \nimport { connect } from 'react-redux'; \nimport PersonalPosts from '../components/posts/PersonalPosts'; \nimport { fetchPosts } from './../actions/posts'; \nimport { fetchComments } from './../actions/comments'; \nimport { deletePost } from './../actions/posts'; \n\nclass PersonalPostContainer extends React.PureComponent {\n\n    componentDidMount() {\n        this.props.fetchPosts()\n        this.props.fetchComments()\n    }\n\n    render(){\n        return(\n            <div> \n                <PersonalPosts posts={this.props.posts} userLoggedIn={this.props.userLoggedIn} deletePost={this.props.deletePost} history={this.props.history}  /> \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        userLoggedIn: state.currentUserReducer, \n        posts: state.postReducer, \n        comments: state.commentReducer\n    })\n}\n\n\nexport default connect(mapStateToProps, { fetchPosts, fetchComments, deletePost } )(PersonalPostContainer)\n  ","import React, { Component } from 'react';\nimport { connect } from 'react-redux'; \nimport { createPost } from '../../actions/posts'; \nimport { withRouter } from 'react-router-dom'; \n\n\nclass PostForm extends Component {\n\n    constructor(props){\n        super(props); \n        this.state = {\n            location: '', \n            story: '', \n            user_id: this.props.userLoggedIn.id\n        }\n\n        //this.handleOnChange = this.handleOnChange.bind(this)\n    }\n\n    handleOnChange = (event) =>{\n        this.setState({\n            [event.target.name]: event.target.value \n        })\n    }\n\n    handleOnSubmit = (event) => {\n        event.preventDefault(); \n        this.props.createPost(this.state)\n        this.setState({\n            location: '', \n            story: ''\n        })\n        this.props.history.push('/personalPosts')\n    }\n\n    render() {\n        return(\n            <div className=\"container\"> \n                <form className=\"form\" onSubmit={this.handleOnSubmit}>\n                    <label htmlFor=\"location\" className=\"InnerForm\">Location</label>\n                    <input type=\"text\" name=\"location\" onChange={this.handleOnChange} value={this.state.location}/> \n                    <label htmlFor=\"story\" className=\"InnerForm\">Story</label>\n                    <textarea type=\"text\" name=\"story\" onChange={this.handleOnChange}  value={this.state.story}/> \n                <button type=\"submit\" className=\"StoryButton\">Submit Story</button>\n                </form>\n            </div>\n        )\n    }\n\n}\n\nexport default withRouter(connect(null, { createPost })(PostForm))","import React, { Component } from 'react'; \nimport { connect } from 'react-redux'; \nimport PostForm from '../components/posts/PostForm'; \n\nclass CreatePostContainer extends Component{\n    render(){\n        return(\n            <div> \n                <PostForm userLoggedIn={this.props.userLoggedIn} />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return({\n        userLoggedIn: state.currentUserReducer\n    })\n}\n\nexport default connect(mapStateToProps)(CreatePostContainer)","import React, { Component } from 'react'; \nimport './../App.css';\n\nclass Number extends Component{\n\n    state = {\n        count: 0\n    }\n    \n        // console.log('a')\n\n        // fetch (\"https://auroraborealis-api.herokuapp.com/posts\", {\n        //     credentials: \"include\", \n        //     method: \"GET\", \n        //     headers: {\n        //         \"Content-Type\": \"application/json\"\n        //     }\n        // })\n        //     .then(resp => {\n                // if(resp.status !== 200) {\n                //     throw new Error(resp.statusText);\n                // }\n        //         console.log('b', resp)\n        //         return resp.json();\n        //     })\n        //     .then(data => console.log('c', data))\n        //     .catch(errors => console.log('d', errors))\n\n        // console.log('e');\n\n        // a, e, d\n    //   }\n\n    increment = () => {\n        const updatedCount = this.state.count + 1\n        this.setState({\n          count: updatedCount\n        })\n    }\n\n\n    deduction = () => {\n        const updatedCount = this.state.count - 1\n        this.setState({\n            count: updatedCount\n        })\n    }\n\n    render(){\n        return(\n            <div>\n                <button className=\"CounterButton\" onClick={this.increment}> \n                    Click Me Increase!!\n                </button>\n                <button className=\"CounterButton\" onClick={this.deduction} >\n                    Click Me Decrease!!\n                </button>\n                <div className=\"Number\" >\n                    {this.state.count}\n                </div>\n            </div>\n        )\n    }\n\n\n}\n\nexport default Number","import React from 'react';\nimport { connect } from 'react-redux'; \nimport Logout from './Logout'; \nimport Login from './Login'; \nimport SignUp from './SignUp'; \nimport { Route, Switch, NavLink } from 'react-router-dom';\nimport PostContainer from '../../containers/PostContainer'\nimport PersonalPostContainer from '../../containers/PersonalPostContainer';\nimport CreatePostContainer from '../../containers/CreatePostContainer';\nimport '../../App.css';\nimport Number from '../../containers/Number'\n\nconst Nav = ({ userLoggedIn }) => {\n\n    return(\n        userLoggedIn ?\n        <div className=\"navigation\"> \n            <NavLink to=\"/posts\" activeStyle={{color: 'gold'}}><p> All Posts </p></NavLink>\n            <NavLink to=\"/personalPosts\" activeStyle={{color: 'gold'}}><p> Personal Posts </p></NavLink>\n            <NavLink to=\"/createPost\" activeStyle={{color: 'gold'}}><p> Create Posts </p></NavLink>\n            <NavLink to=\"/logout\" activeStyle={{color: 'gold'}}><p> Logout </p></NavLink>\n            <Switch> \n                <Route exact path=\"/posts\" component={ PostContainer } /> \n                <Route exact path=\"/personalPosts\" component={ PersonalPostContainer} />\n                <Route exact path=\"/createPost\" component={ CreatePostContainer} />\n                <Route exact path=\"/logout\" component={ Logout} />\n            </Switch> \n        </div>\n        : \n        <div className=\"navigation\"> \n            <NavLink to=\"/login\" activeStyle={{color: 'gold'}}><p> Login </p></NavLink>\n            <NavLink to=\"/signup\" activeStyle={{color: 'gold'}}><p> Sign Up </p></NavLink>\n            <Switch> \n                <Route exact path=\"/login\" component={ Login } />\n                <Route exact path=\"/signup\" component={ SignUp } />\n            </Switch>\n\n            <Number/>         \n        </div>\n    )\n}\n\nconst mapStateToProps = state => {\n    return({\n        userLoggedIn: !!state.currentUserReducer\n    })\n}\n\nexport default connect(mapStateToProps)(Nav)","import React from 'react';\nimport './App.css';\nimport Nav from './components/user/Nav'; \n// import Background from './components/Background'; \n\n// import { getCurrentUser } from './actions/user'; \n// import { connect } from 'react-redux';\n\nclass App extends React.PureComponent {\n\n//   componentDidMount() {\n//     this.props.getCurrentUser()\n// }\n\n    // state = {\n    //   spceImage: []\n    // }\n\n  // componentDidMount() {\n  //   fetch(\"https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY\")\n  //   .then(response => response.json())\n  //   .then((data) => {\n  //     this.setState({ spceImage: data.hdurl })\n  //   })\n  // }\n\n  render() {\n    return(\n      <div>\n        <Nav/>\n      </div>\n    )\n  }\n}; \n\n\n// const mapStateToProps = state => {\n//   return({\n//     userLoggedIn: !!state.currentUserReducer\n//   })\n// }\n\n// export default connect(mapStateToProps, { getCurrentUser })(App); \n\nexport default App \n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = []\n\nfunction postReducer (state = initialState, action){\n    switch(action.type) {\n        case \"GET_POSTS\":\n            return action.posts\n        \n        case \"ADD_POST\":\n            return [...state, action.post]\n\n        case \"DELETE_POST\": \n            return state.filter(post => post.id !== action.postId)\n\n        case \"UPDATE_POST\": \n            return state.map(post => post.id === action.post.id ? action.post : post)\n\n        case \"CLEAR_POSTS\": \n            return initialState\n\n        default: \n            return state\n\n        case 'UPVOTE_POST':\n            return state.map((post) => \n            post.id === action.postId ? {...post, votes: (post.votes += 1)} : post\n            )\n\n        case 'DOWNVOTE_POST': \n            return state.map((post) =>\n            post.id === action.postId && post.votes > 0 ? {...post, votes: (post.votes -= 1)} : post\n            )  \n    }\n}\n\nexport default postReducer; ","function currentUserReducer(state=null, action) {\n    switch (action.type) {\n        case 'CURRENT_USER':\n            console.log(\"Set Current User\") \n            return action.user \n\n        case 'REMOVE_USER': \n            console.log(\"Removed User\")\n            return null\n        \n        default: \n            console.log(\"Default\")\n            return state; \n    }\n}\n\nexport default currentUserReducer; ","import React from 'react'; \nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'; \nimport thunk from 'redux-thunk'; \nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom'; \nimport postReducer from './reducers/postReducer'; \nimport currentUserReducer from './reducers/currentUserReducer';\n\nconst reducer = combineReducers({\n  currentUserReducer, \n  postReducer\n})\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancer(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = { store } > \n      <Router> \n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}